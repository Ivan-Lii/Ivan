import numpy
import scipy.special
import scipy.ndimage


#neural network network definition

class neuralNetwork:

    #initialise the neural network
    def __init__(self,inputnodes,hiddennodes,outputnodes,learningrate):
        #set the number of nodes in each input,output,hidden layer
        self.inodes=inputnodes
        self.hnodes=hiddennodes
        self.onodes=outputnodes

        #learning rate
        self.lr=learningrate

        #link weight matrices,wih and who
        #weight inside the array are w_i_j,where link is from node i to node j in the next layer
        #w11 w21
        #w12 w22 etc
        # self.wih=(numpy.random.rand(self.hnodes,self.inodes)-0.5)
        # self.who=(numpy.random.rand(self.onodes,self.hnodes)-0.5)

        self.wih=numpy.random.normal(0.0,pow(self.hnodes,-0.5),(self.hnodes,self.inodes))
        self.who=numpy.random.normal(0.0,pow(self.onodes,-0.5),(self.onodes,self.hnodes))

        #activation function is the sigmoid function
        self.activation_function=lambda x:scipy.special.expit(x)

        pass

    #train the neural network
    def train(self,inputs_list,targets_list):
        #convert inputs list to 2d array
        inputs=numpy.array(inputs_list,ndmin=2).T
        targets=numpy.array(targets_list,ndmin=2).T

        #calculate signals into hidden layer
        hidden_inputs=numpy.dot(self.wih,inputs)
        #calculate signals emerging fron hidden layer
        hidden_outputs=self.activation_function(hidden_inputs)

        #calculate signals into final output layer
        final_inputs=numpy.dot(self.who,hidden_outputs)
        #calculate the signals emerging from final output layer
        final_outputs=self.activation_function(final_inputs)

        #error is the (target-actual)
        output_errors=targets-final_outputs

        #hidden error is the output_errors,spilt by weights,recombined at hidden nodes
        hidden_errors=numpy.dot(self.who.T,output_errors)
        #update the weights for the links between the hidden and outputs layers
        self.who+=self.lr*numpy.dot((output_errors*final_outputs*(1.0-final_outputs)),numpy.transpose(hidden_outputs))
        #update the weights for the input and hidden layers
        self.wih+=self.lr*numpy.dot((hidden_errors*hidden_outputs*(1.0-hidden_outputs)),numpy.transpose(inputs))

        pass

    #query the neural network

    def query(self,inputs_list):
        #calculate signals into hidden layer
        hidden_inputs=numpy.dot(self.wih,inputs_list)
        #calculate signals emerging fron hidden layer
        hidden_outputs=self.activation_function(hidden_inputs)

        #calculate signals into final output layer
        final_inputs=numpy.dot(self.who,hidden_outputs)
        #calculate the signals emerging from final output layer
        final_outputs=self.activation_function(final_inputs)

        return final_outputs


if __name__=="__main__" :
    input_nodes=784
    hidden_nodes=100
    output_nodes=10

    learning_rate=0.15
    n=neuralNetwork(input_nodes,hidden_nodes,output_nodes,learning_rate)
    # n.train([1.0,0.5,-1.5],[1,2,3])
    # print(n.query([1.0,0.5,-1.5]))

    training_data_file = open("mnist_train.csv", 'r')

    #epochs is the number if times the training data set si used for training
    epochs=2
    for e in range(epochs):
        for record in training_data_file:
            # print(record)
            #split the record by the ',' commas
            all_values=record.split(',')
            #scale and shift the inputs
            inputs=(numpy.asfarray(all_values[1:])/255.0*0.99)+0.01

            #create rotated variations
            #rotated anticlockwise by 10 degrees
            inputs_plus10_img=scipy.ndimage.interpolation.rotate(inputs.reshape(28,28),10,cval=0.01,reshape=False)
            #rotated clockwise by 10 degress
            inputs_mines10_img=scipy.ndimage.interpolation.rotate(inputs.reshape(28,28),-10,cval=0.01,reshape=False)
            #create the target output values(all 0.01,except the desired label which is 0.99)
            targets=numpy.zeros(output_nodes)+0.01
            targets[int(all_values[0])]=0.99
            # print(targets)
            n.train(inputs,targets)
            n.train(inputs_plus10_img.reshape(784),targets)
            n.train(inputs_mines10_img.reshape(784),targets)
    training_data_file.close()

    #test the network
    scorecard=[]
    test_data_file=open("mnist_test.csv", 'r')
    for record in test_data_file:
        #split the record by the ','commas
        all_values=record.split(',')
        #correct answer si the first value
        correct_label=int(all_values[0])
        # print('correct label',correct_label)
        #scale and shift the inputs
        inputs=(numpy.asfarray(all_values[1:])/255.0*0.99)+0.01
        #query the network
        outputs=n.query(inputs)
        #the index of the heighest value corresponds to the label
        label=numpy.argmax(outputs)
        print(correct_label,label)
        if(label==correct_label):
            scorecard.append(1)
        else:
            scorecard.append(0)
    print(sum(scorecard))
    print(sum(scorecard)/len(scorecard))
    # all_values = data_list.split(',')
    # print(all_values)
    # image_array=numpy.asfarray(all_values[1:]).reshape((28,28))
    # scaled_input = (numpy.asfarray(all_values[1:]) / 255.0 * 0.99) + 0.01
    # print(scaled_input)
    # matplotlib.pyplot.imshow(image_array,cmap="Greys",interpolation='None')
